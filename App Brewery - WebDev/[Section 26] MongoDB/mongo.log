Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.

Try the new cross-platform PowerShell https://aka.ms/pscore6

PS C:\Users\harsh> mongo
MongoDB shell version v4.4.6
connecting to: mongodb://127.0.0.1:27017/?compressors=disabled&gssapiServiceName=mongodb
Implicit session: session { "id" : UUID("01d18868-c620-4ce4-bb5e-f609228938db") }
MongoDB server version: 4.4.6
---
The server generated these startup warnings when booting:
        2021-07-07T00:41:54.418+05:30: Access control is not enabled for the database. Read and write access to data and configuration is unrestricted
---
---
        Enable MongoDB's free cloud-based monitoring service, which will then receive and display
        metrics about your deployment (disk utilization, CPU, operation statistics, etc).

        The monitoring data will be available on a MongoDB website with a unique URL accessible to you
        and anyone you share the URL with. MongoDB may use this information to make product
        improvements and to suggest MongoDB products and deployment options to you.

        To enable free monitoring, run the following command: db.enableFreeMonitoring()
        To permanently disable this reminder, run the following command: db.disableFreeMonitoring()
---
> help
        db.help()                    help on db methods
        db.mycoll.help()             help on collection methods
        sh.help()                    sharding helpers
        rs.help()                    replica set helpers
        help admin                   administrative help
        help connect                 connecting to a db help
        help keys                    key shortcuts
        help misc                    misc things to know
        help mr                      mapreduce

        show dbs                     show database names
        show collections             show collections in current database
        show users                   show users in current database
        show profile                 show most recent system.profile entries with time >= 1ms
        show logs                    show the accessible logger names
        show log [name]              prints out the last segment of log in memory, 'global' is default
        use <db_name>                set current database
        db.mycoll.find()             list objects in collection mycoll
        db.mycoll.find( { a : 1 } )  list objects in mycoll where a == 1
        it                           result of the last line evaluated; use to further iterate
        DBQuery.shellBatchSize = x   set default number of items to display on shell
        exit                         quit the mongo shell
> show dbs
admin   0.000GB
config  0.000GB
local   0.000GB
> use shopDB
switched to db shopDB
> show dbs
admin   0.000GB
config  0.000GB
local   0.000GB
> db
shopDB
> db.products.insertOne({_id: 1, name: "Pen", price: 1.20})
{ "acknowledged" : true, "insertedId" : 1 }
> show collections
products
> db
shopDB
> db.products.insertOne({_id: 2, name: "Pencil", price: 0.80})
{ "acknowledged" : true, "insertedId" : 2 }
> show collections
products
> show collections
products
> db.products.find()
{ "_id" : 1, "name" : "Pen", "price" : 1.2 }
{ "_id" : 2, "name" : "Pencil", "price" : 0.8 }
> db.products.find({name: 'Pencil'})
{ "_id" : 2, "name" : "Pencil", "price" : 0.8 }
> db.products.find({price: {$gt: 1.0}})
{ "_id" : 1, "name" : "Pen", "price" : 1.2 }
> db.products.find({_id: 1}. {name: 1})
uncaught exception: SyntaxError: missing name after . operator :
@(shell):1:27
> db.products.find({_id: 1}, {name: 1})
{ "_id" : 1, "name" : "Pen" }
> db.products.updateOne({_id: 1}, {$set: {stock:32}})
{ "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 1 }
> db.products.find()
{ "_id" : 1, "name" : "Pen", "price" : 1.2, "stock" : 32 }
{ "_id" : 2, "name" : "Pencil", "price" : 0.8 }
> db.products.updateOne({_id: 2}, {$set: {stock: 12}})
{ "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 1 }
> db.products.find()
{ "_id" : 1, "name" : "Pen", "price" : 1.2, "stock" : 32 }
{ "_id" : 2, "name" : "Pencil", "price" : 0.8, "stock" : 12 }
> db.products.deleteOne({_id: 2})
{ "acknowledged" : true, "deletedCount" : 1 }
> db.products.find()
{ "_id" : 1, "name" : "Pen", "price" : 1.2, "stock" : 32 }
> db.products.insert(     {         _id: 3,         name: "Rubber",         price: 1.30,         stock: 43,         reviews: [             {                 authorName: "Sally",                 rating: 5,                 review: "Best Rubber Ever!"             },             {                 authorName: "John",                 rating: 5,                 review: "Awesome Rubber!"             }         ]     } )
WriteResult({ "nInserted" : 1 })
> db.products.find()
{ "_id" : 1, "name" : "Pen", "price" : 1.2, "stock" : 32 }
{ "_id" : 3, "name" : "Rubber", "price" : 1.3, "stock" : 43, "reviews" : [ { "authorName" : "Sally", "rating" : 5, "review" : "Best Rubber Ever!" }, { "authorName" : "John", "rating" : 5, "review" : "Awesome Rubber!" } ] }
> db.products.insert(
...     {
...         _id: 2,
...         name: "Rubber",
...         price: 0.80,
...         stock: 12,
...         reviews: [
...             {
...                 authorName: "Sally",
...                 rating: 5,
...                 review: "Best Pencil Ever!"
...             },
...             {
...                 authorName: "John",
...                 rating: 5,
...                 review: "Awesome Pencil!"
...             }
...         ]
...     }
... )
WriteResult({ "nInserted" : 1 })
> db.products.find()
{ "_id" : 1, "name" : "Pen", "price" : 1.2, "stock" : 32 }
{ "_id" : 3, "name" : "Rubber", "price" : 1.3, "stock" : 43, "reviews" : [ { "authorName" : "Sally", "rating" : 5, "review" : "Best Rubber Ever!" }, { "authorName" : "John", "rating" : 5, "review" : "Awesome Rubber!" } ] }
{ "_id" : 2, "name" : "Rubber", "price" : 0.8, "stock" : 12, "reviews" : [ { "authorName" : "Sally", "rating" : 5, "review" : "Best Pencil Ever!" }, { "authorName" : "John", "rating" : 5, "review" : "Awesome Pencil!" } ] }
>